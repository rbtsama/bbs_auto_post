---
description: 
globs: 
alwaysApply: true
---
## 一、HTML 规范提示语

1. **语义化标签**
    
    > 优先使用语义化标签（如 <header>, <nav>, <main>, <section>, <footer>），提高页面可访问性和 SEO 效果。
    > 
2. **标签嵌套规范**
    
    > 标签必须正确嵌套，避免在内联元素中嵌套块级元素。
    > 
3. **图片 alt 属性**
    
    > 所有图片必须添加 alt 属性，描述图片内容，提升无障碍访问体验。
    > 
4. **表单元素规范**
    
    > 表单元素必须使用 <label> 标签关联对应输入控件，提升表单可用性和可访问性。
    > 
5. **避免深层嵌套**
    
    > HTML 结构应尽量扁平化，嵌套层数不超过 4 层，提升页面渲染性能和可读性。
    > 
6. **统一文档声明**
    
    > 使用 HTML5 文档类型声明：<!DOCTYPE html>，并设置语言属性：<html lang="zh-CN">。
    > 
7. **元数据完整性**
    
    > 页面的 <head> 必须包含完整的元数据，包括 charset、viewport、title 和 description。
    > 

---

## 二、CSS (Tailwind) 规范提示语

1. **Tailwind 优先原则**
    
    > 优先使用 Tailwind CSS 类名实现样式，避免自定义 CSS。
    > 
2. **类名组织顺序**
    
    > 类名顺序应遵循布局 → 尺寸 → 间距 → 颜色 → 状态的顺序。
    > 
    
    ```html
    html复制
    <button class="flex items-center justify-center w-full h-10 px-4 mt-4 bg-blue-500 text-white rounded hover:bg-blue-600">
      提交
    </button>
    ```
    
3. **响应式设计**
    
    > 使用 Tailwind 响应式前缀 (sm:, md:, lg:)，实现移动优先的响应式布局。
    > 
4. **避免任意值**
    
    > 禁止随意使用任意值语法（如 w-[327px]），优先使用 Tailwind 提供的预设值。
    > 
5. **暗模式支持**
    
    > 使用 dark: 变体实现暗模式支持，确保页面在不同主题下的可读性。
    > 
6. **组件样式复用**
    
    > 对于重复使用的样式组合，使用 @apply 指令抽象为可复用的类。
    > 
    
    ```css
    css复制
    .btn-primary {
      @apply px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600;
    }
    
    ```
    
7. **避免内联样式**
    
    > 禁止使用内联 style 属性，所有样式必须通过 Tailwind 类名或组件样式实现。
    > 
8. **CSS 变量管理**
    
    > CSS 变量统一在主题文件中定义，组件内禁止定义局部 CSS 变量。
    > 
9. **严格控制自定义 CSS**
    
    > 每个组件自定义 CSS 不超过20行，超过需重构为 Tailwind 实现或提取为公共组件。
    > 

---

## 三、JavaScript 规范提示语

1. **变量声明**
    
    > 使用 const 声明不可变变量，使用 let 声明可变变量，禁止使用 var。
    > 
2. **函数命名规范**
    
    > 函数名使用驼峰命名法（camelCase），以动词开头，如 getUserInfo()。
    > 
3. **模块化组织**
    
    > 使用 ES Modules (import/export) 模块化组织代码，每个文件只负责单一功能。
    > 
4. **异步操作处理**
    
    > 优先使用 async/await 处理异步操作，提高代码可读性，避免回调地狱。
    > 
5. **事件处理优化**
    
    > 对频繁触发的事件（如滚动、输入）使用防抖（debounce）或节流（throttle）优化性能。
    > 
6. **避免全局变量**
    
    > 禁止声明全局变量，使用模块作用域或函数作用域限制变量访问范围。
    > 
7. **错误处理规范**
    
    > 使用 try/catch 捕获和处理可能发生的异常，避免未捕获的错误导致应用崩溃。
    > 
8. **代码注释**
    
    > 为复杂逻辑添加注释，使用 JSDoc 风格为函数提供参数和返回值说明。
    > 
    
    ```
    js复制
    /**
     * 获取用户信息
     * @param {number} id 用户ID
     * @returns {Promise<User>} 用户信息
     */
    async function getUserInfo(id) {
      //...
    }
    
    ```
    
9. **避免过早优化**
    
    > 优先保证代码的可读性和可维护性，在性能瓶颈处再进行优化。
    > 
10. **代码风格统一**
    
    > 使用 ESLint 和 Prettier 保持代码风格一致，在提交代码前执行格式化和检查。
    > 

---

以上规范提示可作为团队开发 HTML、CSS(Tailwind)、JavaScript 时的基础指南，以提升代码质量、可维护性和开发效率。